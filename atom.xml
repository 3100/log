<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[3log]]></title>
  
  <link href="/log/atom.xml" rel="self"/>
  <link href="http://3100.github.io/log/"/>
  <updated>2015-12-30T13:36:47.953Z</updated>
  <id>http://3100.github.io/log/</id>
  
  <author>
    <name><![CDATA[3100]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Arch LinuxでMacのカラープロファイルを利用する]]></title>
    <link href="http://3100.github.io/log/2015/12/30/use-mac-color-profile-with-arch/"/>
    <id>http://3100.github.io/log/2015/12/30/use-mac-color-profile-with-arch/</id>
    <published>2015-12-30T11:58:53.000Z</published>
    <updated>2015-12-30T13:36:47.953Z</updated>
    <content type="html"><![CDATA[<p>MacBook AirでArch Linuxを動かしていると、OSXの時の画面と比べて色合いが異なる印象を受けます。これはデフォルトのカラープロファイルがMacで使っていたものと異なるためです。</p>
<p>自分の環境では、やけに画面が青白く、バックライトを弱くしても目に刺さるような感じがありました。逆に言えば、それだけMacのいわゆる尿液晶に慣れてしまっているのかもしれません。<br>一応、ブルーライト対策としてはOSXで使用しているf.luxに似たアプリとして、<a href="https://wiki.archlinuxjp.org/index.php/Redshift" target="_blank" rel="external">Redshift</a>を導入済みですが、どうも違和感が拭えません。</p>
<p>そこで、OSXのカラープロファイルをArch上でも再現することにしました。</p>
<p>基本的には<a href="https://wiki.archlinuxjp.org/index.php/MacBook#.E3.82.AB.E3.83.A9.E3.83.BC.E3.83.97.E3.83.AD.E3.83.95.E3.82.A1.E3.82.A4.E3.83.AB" target="_blank" rel="external">MacBook - ArchWiki</a>のカラープロファイルの項を参考にしています。</p>
<h2 id="OSX_u306E_u30AB_u30E9_u30FC_u30D7_u30ED_u30D5_u30A1_u30A4_u30EB_u3092_u53D6_u5F97_u3059_u308B"><a href="#OSX_u306E_u30AB_u30E9_u30FC_u30D7_u30ED_u30D5_u30A1_u30A4_u30EB_u3092_u53D6_u5F97_u3059_u308B" class="headerlink" title="OSXのカラープロファイルを取得する"></a>OSXのカラープロファイルを取得する</h2><p>OSXを起動し、<code>/Library/ColorSync/Profiles/Displays/</code>下にあるカラープロファイル(<code>*.icc</code>)をDropBoxか何かのArchからもアクセスできる場所にコピーします。</p>
<h2 id="xcalib_u306E_u5C0E_u5165"><a href="#xcalib_u306E_u5C0E_u5165" class="headerlink" title="xcalibの導入"></a>xcalibの導入</h2><p>AURとして提供されている<code>xcalib</code>をインストールします。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yaourt -S xcalib</span><br></pre></td></tr></table></figure>
<p>試しにカラープロファイルを変更してみましょう。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ xcalib &lt;path&gt;/your.icc</span><br></pre></td></tr></table></figure>
<p>画面の色合いが変化すれば正しく動作しています。</p>
<h2 id="u81EA_u52D5_u8D77_u52D5_u7528_u30B9_u30AF_u30EA_u30D7_u30C8"><a href="#u81EA_u52D5_u8D77_u52D5_u7528_u30B9_u30AF_u30EA_u30D7_u30C8" class="headerlink" title="自動起動用スクリプト"></a>自動起動用スクリプト</h2><p>先ほどのコマンドを毎回ログイン毎に実行したくはないので、自動的に実行されるようにします。お使いのGUI環境次第ですが、<code>Enlightenment</code>の場合は以下のようにできます。</p>
<h3 id="sh_u30D5_u30A1_u30A4_u30EB_u306E_u4F5C_u6210"><a href="#sh_u30D5_u30A1_u30A4_u30EB_u306E_u4F5C_u6210" class="headerlink" title="shファイルの作成"></a>shファイルの作成</h3><p>適当な名前をつけて、スクリプトファイルを作成します。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/sh</span></span><br><span class="line">xcalib &lt;path&gt;/your.icc</span><br></pre></td></tr></table></figure>
<p>これを実行可能にします。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chmod +x &lt;path&gt;/your_script.sh</span><br></pre></td></tr></table></figure>
<h3 id="u30B9_u30BF_u30FC_u30C8_u30A2_u30C3_u30D7_u30A2_u30D7_u30EA_u30B1_u30FC_u30B7_u30E7_u30F3_u3068_u3057_u3066_u767B_u9332"><a href="#u30B9_u30BF_u30FC_u30C8_u30A2_u30C3_u30D7_u30A2_u30D7_u30EA_u30B1_u30FC_u30B7_u30E7_u30F3_u3068_u3057_u3066_u767B_u9332" class="headerlink" title="スタートアップアプリケーションとして登録"></a>スタートアップアプリケーションとして登録</h3><p>次に、これをスタートアップアプリケーションとして登録します。<br><code>Enlightenment</code>のメニューから設定-&gt;設定パネル-&gt;アプリケーション-&gt;Personal Application Lanchersを選択します。<br>追加ボタンを押し、先ほどのスクリプトファイルに適当な名前を付けて登録します。</p>
<p>これで、次回以降のログイン時に、Macのカラープロファイルが適用された状態になります。</p>
<p>ちょっとした違いですが、感覚的にはだいぶ見やすくなった気がします。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>MacBook AirでArch Linuxを動かしていると、OSXの時の画面と比べて色合いが異なる印象を受けます。これはデフォルトのカラープロファイルがMacで使っていたものと異なるためです。</p>
<p>自分の環境では、やけに画面が青白く、バックライトを弱くしても目に]]>
    </summary>
    
      <category term="arch" scheme="http://3100.github.io/log/tags/arch/"/>
    
      <category term="mac" scheme="http://3100.github.io/log/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Arch LinuxでProfile-sync-daemonを導入してSSDの劣化を抑える(2)]]></title>
    <link href="http://3100.github.io/log/2015/12/30/arch-and-ssd-2/"/>
    <id>http://3100.github.io/log/2015/12/30/arch-and-ssd-2/</id>
    <published>2015-12-30T03:17:19.000Z</published>
    <updated>2015-12-30T03:53:54.461Z</updated>
    <content type="html"><![CDATA[<p><a href="http://3100.github.io/log/2015/12/30/arch-and-ssd/">前回</a>の続きです。<br>今回はFirefoxやGoogle Chromeのプロファイル以外のキャッシュディレクトリもRAM上に置くようにします。</p>
<p>必要なことは簡単で、キャッシュディレクトリをProfile-sync-daemonの管理下に移動し、元の場所にシンボリックリンクを貼るだけです。</p>
<p>Firefox:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mv $HOME/.cache/mozilla/firefox/&lt;profile&gt; $HOME/.mozilla/firefox/&lt;profile&gt;/cache</span><br><span class="line">$ ln -s $HOME/.mozilla/firefox/&lt;profile&gt;/cache $HOME/.cache/mozilla/firefox/&lt;profile&gt;</span><br></pre></td></tr></table></figure>
<p>Google Chrome:</p>
<figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>mv <span class="variable">$HOME</span>/.cache/google-chrome/<span class="constant">Default</span> <span class="variable">$HOME</span>/.config/google-chrome/cache</span><br><span class="line"><span class="variable">$ </span>ln -s <span class="variable">$HOME</span>/.config/google-chrome/cache <span class="variable">$HOME</span>/.cache/google-chrome/<span class="constant">Default</span></span><br></pre></td></tr></table></figure>
<p>Profile-sync-daemonでの管理フォルダの場所がわからない場合は</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ psd parse</span><br></pre></td></tr></table></figure>
<p>から、<code>sync target</code>の項目で確認できます。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://3100.github.io/log/2015/12/30/arch-and-ssd/">前回</a>の続きです。<br>今回はFirefoxやGoogle Chromeのプロファイル以外のキャッシュディレクトリもRAM上に置くようにします。]]>
    </summary>
    
      <category term="arch" scheme="http://3100.github.io/log/tags/arch/"/>
    
      <category term="ssd" scheme="http://3100.github.io/log/tags/ssd/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Arch LinuxでProfile-sync-daemonを導入してSSDの劣化を抑える(1)]]></title>
    <link href="http://3100.github.io/log/2015/12/30/arch-and-ssd/"/>
    <id>http://3100.github.io/log/2015/12/30/arch-and-ssd/</id>
    <published>2015-12-30T01:53:13.000Z</published>
    <updated>2015-12-30T04:07:29.857Z</updated>
    <content type="html"><![CDATA[<p>MacBook Air(mid-2012)にArch Linuxを載せて(デュアルブート)動かしています。<br>FirefoxやChromeを使う際に、ブラウザキャッシュの頻繁な書き込みがSSDの寿命を短くするといった言及をいくつか見たので、対応することにしました。</p>
<p>以下の記事と、<a href="https://wiki.archlinuxjp.org/index.php/Profile-sync-daemon" target="_blank" rel="external">Arch Wikiの該当ページ</a>を参考に、現時点での最新方法を残しておきます。</p>
<p><a href="http://basicwerk.com/blog/archives/1781" target="_blank" rel="external">Arch Linux を SSD に移した時のメモ | Basic Werk</a></p>
<p>上記記事で言及されている<code>/etc/fstab</code>の設定についてはArch Linux導入時に済ませているので、割愛します。Arch Wikiの導入ガイドに従っていれば済んでいるかと思います。</p>
<h2 id="profile-sync-daemon__28AUR_29"><a href="#profile-sync-daemon__28AUR_29" class="headerlink" title="profile-sync-daemon (AUR)"></a>profile-sync-daemon (AUR)</h2><p>ブラウザキャッシュやプロファイルをRAM上で管理するためのサービスを提供します。内部的には<code>rsync</code>を利用して同期を取るようです。</p>
<p><a href="https://wiki.archlinuxjp.org/index.php/Profile-sync-daemon" target="_blank" rel="external">Profile-sync-daemon - ArchWiki</a></p>
<p>AURパッケージなのでyaourtの利用を推奨します。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yaourt -S profile-sync-daemon</span><br></pre></td></tr></table></figure>
<p>Wikiでは<code>/etc/psd.conf</code>を設定ファイルとして利用すると書かれていますが、現時点(v6.20)では既にこの方法は陳腐化しています。代わりにユーザのホームフォルダで設定ファイルを管理するようになっています。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ profile-sync-daemon parse</span><br></pre></td></tr></table></figure>
<p>を実行すると、設定ファイルがどこに置かれたかが表示されますので、そのファイルを編集します。デフォルトでは<code>$HOME/.config/psd/psd.conf</code>あたりになるようです。</p>
<p>自分の環境では<code>firefox</code>(メイン)と<code>google-chrome</code>(AmazonプライムやYoutube用)を使っているので、以下のように設定しています。</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="setting">BROWSERS=<span class="value"><span class="string">"firefox google-chrome"</span></span></span></span><br></pre></td></tr></table></figure>
<p>また、可能であれば<code>overlayfs</code>を有効にすることで、RAMの使用量を減らし、同期を高速化できます。(事前準備については後述)</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="setting">USE_OVERLAYFS=<span class="value"><span class="string">"yes"</span></span></span></span><br></pre></td></tr></table></figure>
<p>設定ファイルを更新後、サービスを起動します。次回再起動時以降に、自動起動できるようにします。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl --user start psd.service</span><br><span class="line">$ systemctl --user <span class="built_in">enable</span> psd.service</span><br></pre></td></tr></table></figure>
<h3 id="overlayfs_u306E_u8A2D_u5B9A"><a href="#overlayfs_u306E_u8A2D_u5B9A" class="headerlink" title="overlayfsの設定"></a>overlayfsの設定</h3><p>Linuxのカーネルが3.18.0以降ではoverlayfsが利用可能です。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ uname -r</span><br></pre></td></tr></table></figure>
<p>でバージョンの確認ができます。</p>
<p>管理者権限で</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># modprobe overlay</span><br></pre></td></tr></table></figure>
<p>して<code>overlay</code>モジュールをロードします。環境によっては<code>overlayfs</code>の場合もあるようです。</p>
<p>起動時に読み込ませるためには<code>/etc/modules-load.d/overlay.conf</code>(名前は自由)を作成し、読み込ませたいモジュール名として<code>overlay</code>を記述します。</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># 起動時に読み込むモジュール名のみ指定</span></span><br><span class="line">overlay</span><br></pre></td></tr></table></figure>
<h3 id="overlayfs_u304C_u6709_u52B9_u306B_u306A_u3089_u306A_u3044"><a href="#overlayfs_u304C_u6709_u52B9_u306B_u306A_u3089_u306A_u3044" class="headerlink" title="overlayfsが有効にならない"></a>overlayfsが有効にならない</h3><p>上記の設定などが済んだあとで、正しく設定がされているかどうかを確認してみましょう。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ psd parse</span><br><span class="line"> ERROR! To use overlayfs mode, &lt;username&gt; needs sudo access to /usr/bin/psd-overlay-helper</span><br><span class="line"></span><br><span class="line"> Add the following line to the end of /etc/sudoers to <span class="built_in">enable</span> this functionality:</span><br><span class="line">   &lt;username&gt; ALL=(ALL) NOPASSWD: /usr/bin/psd-overlay-helper</span><br></pre></td></tr></table></figure>
<p>権限周りで怒られていますね。<code>visudo</code>して、最下行を追加します。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ psd parse</span><br><span class="line">Profile-sync-daemon v6.<span class="number">20</span> on Arch Linux</span><br><span class="line"></span><br><span class="line"> Systemd service is currently active.</span><br><span class="line"> Systemd resync-timer is currently active.</span><br><span class="line"> Overlayfs v23 is currently active.</span><br><span class="line"></span><br><span class="line">Psd will manage the following per /home/&lt;username&gt;/.config/psd/psd.conf:</span><br><span class="line"></span><br><span class="line"> browser/psname:  firefox/firefox</span><br><span class="line"> owner/group id:  &lt;username&gt;/<span class="number">100</span></span><br><span class="line"> sync target:     /home/&lt;username&gt;/.mozilla/firefox/ffzva242.default</span><br><span class="line"> tmpfs dir:       /run/user/<span class="number">1000</span>/&lt;username&gt;-firefox-ffzva242.default</span><br><span class="line"> profile size:    <span class="number">193</span>M</span><br><span class="line"> overlayfs size:</span><br><span class="line"> recovery <span class="built_in">dirs</span>:   none</span><br><span class="line"></span><br><span class="line"> browser/psname:  google-chrome/chrome</span><br><span class="line"> owner/group id:  &lt;username&gt;/<span class="number">100</span></span><br><span class="line"> sync target:     /home/&lt;username&gt;/.config/google-chrome</span><br><span class="line"> tmpfs dir:       /run/user/<span class="number">1000</span>/&lt;username&gt;-google-chrome</span><br><span class="line"> profile size:    <span class="number">77</span>M</span><br><span class="line"> overlayfs size:</span><br><span class="line"> recovery <span class="built_in">dirs</span>:   none</span><br></pre></td></tr></table></figure>
<p>今度は正しく動作していることが確認できました。</p>
<p>実際には、各ブラウザはプロファイル以外のキャッシュも管理しているので、これらもRAM上に移すと良いでしょう。<br>長くなってきたので、この話題は<a href="http://3100.github.io/log/2015/12/30/arch-and-ssd-2/">次回</a>へまわします。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>MacBook Air(mid-2012)にArch Linuxを載せて(デュアルブート)動かしています。<br>FirefoxやChromeを使う際に、ブラウザキャッシュの頻繁な書き込みがSSDの寿命を短くするといった言及をいくつか見たので、対応することにしました。</p]]>
    </summary>
    
      <category term="arch" scheme="http://3100.github.io/log/tags/arch/"/>
    
      <category term="ssd" scheme="http://3100.github.io/log/tags/ssd/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Httpoison 0.4から0.8への変更]]></title>
    <link href="http://3100.github.io/log/2015/11/30/httpoison-040-is-too-old/"/>
    <id>http://3100.github.io/log/2015/11/30/httpoison-040-is-too-old/</id>
    <published>2015-11-30T05:53:10.000Z</published>
    <updated>2015-12-29T06:21:43.636Z</updated>
    <content type="html"><![CDATA[<p>Programming ElixirでHttpoisonを使う例が古かったのでメモ。</p>
<p><code>mix.exs</code>を修正する。<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">defp</span> <span class="title">deps</span></span> <span class="keyword">do</span></span><br><span class="line">  [</span><br><span class="line">    &#123; <span class="symbol">:httpoison</span>, <span class="string">"~&gt; 0.8.0"</span> &#125;</span><br><span class="line">  ]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p>
<p><code>issues/github_issues.exs</code>も修正する<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_response</span></span>(&#123;<span class="symbol">:ok</span>, %<span class="constant">HTTPoison.Response&#123;</span><span class="symbol">status_code:</span> <span class="number">200</span>, <span class="symbol">body:</span> body&#125;&#125;), <span class="symbol">do:</span> &#123; <span class="symbol">:ok</span>, body &#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_response</span></span>(&#123;<span class="symbol">:ok</span>, %<span class="constant">HTTPoison.Response&#123;</span><span class="symbol">status_code:</span> <span class="constant">___,</span> <span class="symbol">body:</span> body&#125;&#125;), <span class="symbol">do:</span> &#123; <span class="symbol">:error</span>, body &#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_response</span></span>(&#123;<span class="symbol">:error</span>, %<span class="constant">HTTPoison.Error&#123;</span><span class="symbol">reason:</span> reason&#125;&#125;), <span class="symbol">do:</span> &#123; <span class="symbol">:error</span>, reason &#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="u4F59_u8AC7"><a href="#u4F59_u8AC7" class="headerlink" title="余談"></a>余談</h2><p>尚、PragProgのサポートサイトには<code>#77904</code>に該当するエラッタが登録されており、<br><code>mix.exs</code>にて</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">defp</span> <span class="title">deps</span></span> <span class="keyword">do</span></span><br><span class="line">  [</span><br><span class="line">    &#123; <span class="symbol">:httpoison</span>, <span class="string">"~&gt; 0.4.0"</span> &#125;</span><br><span class="line">  ]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>とすれば<code>issues/github_issues.exs</code>側を修正せずに動くとあります。</p>
<p>cf. <a href="https://pragprog.com/titles/elixir/errata" target="_blank" rel="external">The Pragmatic Bookshelf | Errata for Programming Elixir</a></p>
<p>が、手元環境(Elixir 1.1.1, OTP 18.0)だと依存パッケージの<code>hackney</code>がコンパイルできなくなる問題があったため諦めました。指示されるコマンドを実行しても解決せず。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">3100</span>]$ iex -S mix</span><br><span class="line">Erlang/OTP <span class="number">18</span> [erts-<span class="number">7.1</span>] [<span class="built_in">source</span>] [<span class="number">64</span>-bit] [smp:<span class="number">8</span>:<span class="number">8</span>] [async-threads:<span class="number">10</span>] [hipe] [kernel-poll:<span class="literal">false</span>]</span><br><span class="line"></span><br><span class="line">==&gt; hackney (compile)</span><br><span class="line">ERROR: OTP release <span class="number">18</span> does not match required regex R15|R16|<span class="number">17</span></span><br><span class="line">ERROR: compile failed <span class="keyword">while</span> processing /home/<span class="number">3100</span>/learn/elixir/issues/deps/hackney: rebar_abort</span><br><span class="line">** (Mix) Could not compile dependency :hackney, <span class="string">"/home/3100/.mix/rebar"</span> <span class="built_in">command</span> failed. You can recompile this dependency with <span class="string">"mix deps.compile hackney"</span>, update it with <span class="string">"mix deps.update hackney"</span> or clean it with <span class="string">"mix deps.clean hackney"</span></span><br></pre></td></tr></table></figure>
<p>どうも下のイシューと同じ現象のように見えます。</p>
<p>cf. <a href="https://github.com/elixir-lang/elixir/issues/3857" target="_blank" rel="external">(Mix) Could not compile dependency idna, /root/.mix/rebar command failed. If you want to recompile this dependency, please run: mix deps.compile idna · Issue #3857 · elixir-lang/elixir</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Programming ElixirでHttpoisonを使う例が古かったのでメモ。</p>
<p><code>mix.exs</code>を修正する。<br><figure class="highlight elixir"><table><tr><td class="gu]]>
    </summary>
    
      <category term="elixir" scheme="http://3100.github.io/log/tags/elixir/"/>
    
      <category term="httpoison" scheme="http://3100.github.io/log/tags/httpoison/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ElixirとI18N]]></title>
    <link href="http://3100.github.io/log/2015/11/07/elixir-and-i18n/"/>
    <id>http://3100.github.io/log/2015/11/07/elixir-and-i18n/</id>
    <published>2015-11-06T17:58:59.000Z</published>
    <updated>2015-12-29T06:21:43.636Z</updated>
    <content type="html"><![CDATA[<p>ElixirのI18N対応について。すぐ出てくるライブラリは下の2つあたり。</p>
<p>chrismccord/linguist<br><a href="https://github.com/chrismccord/linguist" target="_blank" rel="external">https://github.com/chrismccord/linguist</a></p>
<p>elixir-lang/gettext<br><a href="https://github.com/elixir-lang/gettext" target="_blank" rel="external">https://github.com/elixir-lang/gettext</a></p>
<p>前者は<a href="https://pragprog.com/book/phoenix/programming-phoenix" target="_blank" rel="external">Programming Phoenix</a>という来年1月発売予定の本の執筆者が作ってるライブラリで、<br>Rubyの<code>i18n</code>に近い使い方ができそうです。辞書ファイルはyamlで定義するやつ。</p>
<p>後者は古き良きgettext(cf. <a href="https://ja.wikipedia.org/wiki/Gettext" target="_blank" rel="external">Wikipedia</a>)といった感じです。こちらは<code>.po</code>ファイルという形式の辞書ファイルを利用します。<br>今回はあるライブラリへの提案をするという背景もあり、gettextを試してみました。<br>Phoenix製Webアプリの開発だったら前者を試すかも。</p>
<h2 id="u5C0E_u5165"><a href="#u5C0E_u5165" class="headerlink" title="導入"></a>導入</h2><p>mixを利用している前提です。<code>mix.exs</code>にgettextを追加します。</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">defp</span> <span class="title">deps</span></span> <span class="keyword">do</span></span><br><span class="line">  [</span><br><span class="line">    &#123;<span class="symbol">:gettext</span>, <span class="string">"~&gt; 0.7"</span>&#125;</span><br><span class="line">  ]</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># アプリケーション起動前に:getetxtが立ち上がるようにする。必須</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span></span> <span class="keyword">do</span></span><br><span class="line">  [</span><br><span class="line">    <span class="symbol">applications:</span> [<span class="symbol">:gettext</span>, <span class="symbol">:logger</span>]</span><br><span class="line">  ]</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># オプション: 指定しておくと`.po`ファイルが更新されるたびにコンパイルされます。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">project</span></span> <span class="keyword">do</span></span><br><span class="line">  [</span><br><span class="line">    <span class="symbol">compilers:</span> [<span class="symbol">:gettext</span>] ++ <span class="constant">Mix.</span>compilers</span><br><span class="line">  ]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h2 id="u30E2_u30B8_u30E5_u30FC_u30EB_u306E_u5B9A_u7FA9"><a href="#u30E2_u30B8_u30E5_u30FC_u30EB_u306E_u5B9A_u7FA9" class="headerlink" title="モジュールの定義"></a>モジュールの定義</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">YourLibraryName</span></span>.<span class="constant">Gettext </span><span class="keyword">do</span></span><br><span class="line">  <span class="keyword">use</span> <span class="constant">Gettext,</span> <span class="symbol">otp_app:</span> <span class="symbol">:your_library_name</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h2 id="u8F9E_u66F8_u30D5_u30A1_u30A4_u30EB_u306E_u5B9A_u7FA9"><a href="#u8F9E_u66F8_u30D5_u30A1_u30A4_u30EB_u306E_u5B9A_u7FA9" class="headerlink" title="辞書ファイルの定義"></a>辞書ファイルの定義</h2><p>例えば日本語(<code>ja_JP</code>)に対応する辞書ファイル(<code>.po</code>)の初期パスは<br><code>priv/gettext/ja_JP/LC_MESSAGES/default.po</code>となります。</p>
<p><code>.po</code>ファイルは以下のような感じに記述します。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msgid &#34;Hello, gettext&#34;&#10;msgstr &#34;&#12371;&#12435;&#12395;&#12385;&#12399;&#12289;&#12466;&#12483;&#12488;&#12486;&#12463;&#12473;&#12488;&#34;&#10;&#10;msgid &#34;Hello, %&#123;name&#125;&#34;&#10;msgstr &#34;&#12371;&#12435;&#12395;&#12385;&#12399;&#12289;%&#123;name&#125;&#34;</span><br></pre></td></tr></table></figure>
<h2 id="u5229_u7528_u65B9_u6CD5"><a href="#u5229_u7528_u65B9_u6CD5" class="headerlink" title="利用方法"></a>利用方法</h2><p>これを利用するには、ソースコード内で</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import <span class="constant">YourLibraryName.Gettext</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_gettext</span></span>, <span class="symbol">do:</span> gettext <span class="string">"Hello, gettext"</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span></span>(name), <span class="symbol">do:</span> gettext <span class="string">"Hello, %&#123;name&#125;"</span>, <span class="symbol">name:</span> name</span><br></pre></td></tr></table></figure>
<p>のように<code>gettext</code>を呼び出します。<br>他にも、単数/複数への対応といった英語圏ぽい機能もありますので、気になる方は以下をどうぞ。</p>
<p><a href="http://hexdocs.pm/gettext/Gettext.html" target="_blank" rel="external">Gettext – gettext v0.7.0</a></p>
<h2 id="u30ED_u30B1_u30FC_u30EB_u306B_u3064_u3044_u3066"><a href="#u30ED_u30B1_u30FC_u30EB_u306B_u3064_u3044_u3066" class="headerlink" title="ロケールについて"></a>ロケールについて</h2><p>デフォルトのロケールは<code>config/config.exs</code>あたりに記述するのが良さそうです。</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config <span class="symbol">:your_library_name</span>, <span class="constant">YourLibraryName.Gettext,</span> <span class="symbol">default_locale:</span> <span class="string">"ja_JP"</span></span><br></pre></td></tr></table></figure>
<p>また、コード中でロケールを変更することもできます。</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 取得</span></span><br><span class="line">locale = <span class="constant">Gettext.</span>get_locale(<span class="constant">YourLibraryName.Gettext)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 設定</span></span><br><span class="line">old_locale = <span class="constant">Gettext.</span>put_locale(<span class="constant">YourLibraryName.Gettext,</span> <span class="string">"en"</span>)</span><br></pre></td></tr></table></figure>
<h2 id="u304A_u307E_u30511_3A__u65E2_u5B58_u306E_u30B3_u30FC_u30C9_u304B_u3089_u8F9E_u66F8_u30D5_u30A1_u30A4_u30EB_u306E_u96DB_u5F62_u3092_u4F5C_u308B"><a href="#u304A_u307E_u30511_3A__u65E2_u5B58_u306E_u30B3_u30FC_u30C9_u304B_u3089_u8F9E_u66F8_u30D5_u30A1_u30A4_u30EB_u306E_u96DB_u5F62_u3092_u4F5C_u308B" class="headerlink" title="おまけ1: 既存のコードから辞書ファイルの雛形を作る"></a>おまけ1: 既存のコードから辞書ファイルの雛形を作る</h2><p>例えば既にあるライブラリに対してI18N対応を行う場合などを考えてみます。</p>
<p>まずは既存コードのリテラル文字列などをすべて<code>gettext</code>関数経由で呼ぶように変更します。</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># "Hello, Elixir"</span></span><br><span class="line">gettext <span class="string">"Hello, Elixir"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># "Hello, #&#123;name&#125;"</span></span><br><span class="line">gettext <span class="string">"Hello, %&#123;name&#125;"</span>, <span class="symbol">name:</span> name</span><br></pre></td></tr></table></figure>
<p>次に、mixに追加されたタスクを実行します。</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>mix gettext.extract</span><br></pre></td></tr></table></figure>
<p>これで<code>priv/gettext/default.pot</code>というテンプレートファイルが生成されます。</p>
<h2 id="u304A_u307E_u30512_3A__u6C17_u306B_u306A_u308B_u901F_u5EA6_u306B_u3064_u3044_u3066"><a href="#u304A_u307E_u30512_3A__u6C17_u306B_u306A_u308B_u901F_u5EA6_u306B_u3064_u3044_u3066" class="headerlink" title="おまけ2: 気になる速度について"></a>おまけ2: 気になる速度について</h2><p>Gettextは可能な処理はランタイム時ではなくコンパイル時に行うように作られているそうです。<br>Elixirのコンパイル時間についてGettext開発者がElixirConf 2015で話した内容が閲覧できますので<br>興味のある方は聴いてみてください。</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/IiP_cTfzk_o" frameborder="0" allowfullscreen></iframe>

<h2 id="u307E_u3068_u3081"><a href="#u307E_u3068_u3081" class="headerlink" title="まとめ"></a>まとめ</h2><p>駆け足ですが、ざっくりとElixirでのI18N対応方法について見ていきました。<br>ちょっとしたライブラリならgettextの仕組みで十分対応できそうですね。</p>
<p>実際に、これを利用して<a href="https://github.com/elixircnx/comeonin" target="_blank" rel="external">elixircnx/comeonin</a>というライブラリをI18N化しました。<br>comeoninはパスワードのダイジェストを生成するためのライブラリで、簡易的なバリデーションのような仕組みを備えています。<br>例えばパスワード強度が足りない時に、I18N化されたメッセージが得られるという感じです。</p>
<p>元々英語だったのですが、日本語辞書を皮切りに、フランス語やドイツ語が追加されているようです。興味がある方は使ってみてください。</p>
<p>あと、Phoenix本、いい感じです。comeoninもこの本で知りました。β版ですが既に販売していますよ。</p>
<p><img src="https://imagery.pragprog.com/products/452/phoenix_xlargebeta.jpg?1441916658" alt=""></p>
<p><a href="https://pragprog.com/book/phoenix/programming-phoenix" target="_blank" rel="external">The Pragmatic Bookshelf | Programming Phoenix</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>ElixirのI18N対応について。すぐ出てくるライブラリは下の2つあたり。</p>
<p>chrismccord/linguist<br><a href="https://github.com/chrismccord/linguist" target="_blank" r]]>
    </summary>
    
      <category term="elixir" scheme="http://3100.github.io/log/tags/elixir/"/>
    
      <category term="i18n" scheme="http://3100.github.io/log/tags/i18n/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CircleCIでMySQLを使う(Padrino)]]></title>
    <link href="http://3100.github.io/log/2015/10/22/circleci-with-mysql/"/>
    <id>http://3100.github.io/log/2015/10/22/circleci-with-mysql/</id>
    <published>2015-10-22T12:51:32.000Z</published>
    <updated>2015-12-29T06:21:43.636Z</updated>
    <content type="html"><![CDATA[<p>PadrinoアプリでActiveRecordを介してMySQLに接続しているのですが<br>これをCircleCIで用意しているMySQLにつなげる方法のメモ。</p>
<p>基本設定となる<code>circle.yml</code>は以下の様になっています。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">machine:&#10;  timezone:&#10;    Asia/Tokyo&#10;  ruby:&#10;    version:&#10;      2.2.0&#10;  environment:&#10;    RACK_ENV: test&#10;  services:&#10;    - mysql&#10;dependencies:&#10;  override:&#10;    - bundle install&#10;database:&#10;  override:&#10;    - mv config/database.yml.ci config/database.yml&#10;    - bundle exec rake ar:create ar:schema:load&#10;test:&#10;  post:&#10;    - bundle exec rake test</span><br></pre></td></tr></table></figure>
<ul>
<li>mysqlを利用させてもらう</li>
<li>各種bundle系コマンドを指定</li>
</ul>
<p>といった部分は特に説明がいらなそうですが<br>データベース用ymlファイル(後述)をCircleCI用に用意しておいて、CIを回す際に置き換えるのがポイントです。</p>
<p>続いて、<code>config/database.rb</code>の設定。<br>必要な設定ではありませんが、Railsなどと融通しやすくするために<code>config/database.yml</code>を読む設定にしています。</p>
<figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">ActiveRecord::Base</span>.configurations = <span class="constant">YAML</span>.load(<span class="constant">ERB</span>.new(<span class="constant">File</span>.read(<span class="constant">Padrino</span>.root(<span class="string">'config'</span>, <span class="string">'database.yml'</span>))).result).with_indifferent_access</span><br></pre></td></tr></table></figure>
<p>cf. <a href="http://sue445.hatenablog.com/entry/2015/01/24/121549" target="_blank" rel="external">Padrinoでアプリ作る時もdatabase.ymlを作った方がよかった - くりにっき</a></p>
<p>最後に、<code>config/database.yml.ci</code>。CircleCIが用意してくれるMySQL環境への接続は以下の設定でOKです。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test:&#10;  adapter: mysql2&#10;  encoding: utf8&#10;  database: app_test&#10;  pool: 5&#10;  username:&#10;  password:</span><br></pre></td></tr></table></figure>
<p>ここまでの設定で、無事にCircleCIでテストコードが実行されるようになりました。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>PadrinoアプリでActiveRecordを介してMySQLに接続しているのですが<br>これをCircleCIで用意しているMySQLにつなげる方法のメモ。</p>
<p>基本設定となる<code>circle.yml</code>は以下の様になっています。</p>
]]>
    </summary>
    
      <category term="circleci" scheme="http://3100.github.io/log/tags/circleci/"/>
    
      <category term="mysql" scheme="http://3100.github.io/log/tags/mysql/"/>
    
      <category term="padrino" scheme="http://3100.github.io/log/tags/padrino/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Pythonをpyenv経由で導入する]]></title>
    <link href="http://3100.github.io/log/2015/10/20/install-python-via-pyenv/"/>
    <id>http://3100.github.io/log/2015/10/20/install-python-via-pyenv/</id>
    <published>2015-10-20T14:53:00.000Z</published>
    <updated>2015-12-29T06:21:43.636Z</updated>
    <content type="html"><![CDATA[<p>毎回よくわからなくなるPythonの導入方法。<br>あまり考えなくても良いかもしれないけど、複数バージョンを使い分ける可能性を考慮すると<br>pyenvを入れるのが簡単かも。OSXならhomebrewで簡単。</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>brew install pyenv</span><br><span class="line"><span class="variable">$ </span>pyenv --version</span><br><span class="line">pyenv <span class="number">20151006</span></span><br></pre></td></tr></table></figure>
<p>shimsにパスを追加するやつ。</p>
<figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ echo '<span class="keyword">export</span> PYENV_ROOT=<span class="string">"<span class="variable">$HOME</span>/.pyenv"</span>' &gt;&gt; ~/.zshenv</span><br><span class="line">$ echo '<span class="keyword">export</span> PATH=<span class="string">"<span class="variable">$PYENV_ROOT</span>/bin:<span class="variable">$PATH</span>"</span>' &gt;&gt; ~/.zshenv</span><br><span class="line">$ echo '<span class="keyword">if</span> which pyenv &gt; /dev/null; then eval <span class="string">"<span class="subst">$(pyenv init -)</span>"</span>; fi' &gt;&gt; ~/.zshenv</span><br></pre></td></tr></table></figure>
<p><code>pyenv install -l</code>として表示された最新のCPythonを導入する。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ pyenv install <span class="number">3.5</span><span class="number">.0</span></span><br><span class="line">Downloading Python-<span class="number">3.5</span><span class="number">.0</span>.tgz...</span><br><span class="line">-&gt; https:<span class="comment">//yyuu.github.io/pythons/584e3d5a02692ca52fce505e68ecd77248a6f2c99adf9db144a39087336b0fe0</span></span><br><span class="line">    Installing Python-<span class="number">3.5</span><span class="number">.0</span>...</span><br><span class="line">    Installed Python-<span class="number">3.5</span><span class="number">.0</span> to /Users/zero/.pyenv/versions/<span class="number">3.5</span><span class="number">.0</span></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pyenv global <span class="number">3.5</span><span class="number">.0</span></span><br><span class="line">$ python --versions</span><br><span class="line">Python <span class="number">2.7</span><span class="number">.9</span></span><br></pre></td></tr></table></figure>
<p>。。。。whichしたらhomebrew経由で昔いれたPythonが優先されてた。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ brew uninstall python</span><br><span class="line">$ python --versions</span><br><span class="line">Python <span class="number">3.5</span><span class="number">.0</span></span><br></pre></td></tr></table></figure>
<p>無事完了。基本的にrbenvと似たAPIぽい。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>毎回よくわからなくなるPythonの導入方法。<br>あまり考えなくても良いかもしれないけど、複数バージョンを使い分ける可能性を考慮すると<br>pyenvを入れるのが簡単かも。OSXならhomebrewで簡単。</p>
<figure class="highlight c]]>
    </summary>
    
      <category term="osx" scheme="http://3100.github.io/log/tags/osx/"/>
    
      <category term="pyenv" scheme="http://3100.github.io/log/tags/pyenv/"/>
    
      <category term="python" scheme="http://3100.github.io/log/tags/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[brew updateでHOMEBREW_CORE_FORMULA_REGEX云々のエラー]]></title>
    <link href="http://3100.github.io/log/2015/09/26/brew-update-error/"/>
    <id>http://3100.github.io/log/2015/09/26/brew-update-error/</id>
    <published>2015-09-26T01:41:36.000Z</published>
    <updated>2015-12-29T06:21:43.636Z</updated>
    <content type="html"><![CDATA[<p>久々に<code>brew update</code>を実行した際に</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">brew <span class="keyword">update</span></span><br><span class="line"><span class="keyword">Error</span>: uninitialized constant Formulary::HOMEBREW_CORE_FORMULA_REGEX</span><br><span class="line">Please <span class="keyword">report</span> this bug:</span><br><span class="line">    https:<span class="comment">//git.io/brew-troubleshooting</span></span><br><span class="line">    /usr/<span class="keyword">local</span>/Library/Homebrew/formulary.rb:260:<span class="keyword">in</span> <span class="label">`loader_for'</span></span><br><span class="line">    /usr/<span class="keyword">local</span>/Library/Homebrew/formulary.rb:205:<span class="keyword">in</span> <span class="label">`factory'</span></span><br><span class="line">    /usr/<span class="keyword">local</span>/Library/Homebrew/cmd/<span class="keyword">update</span>.rb:173:<span class="keyword">in</span> `block <span class="keyword">in</span> <span class="keyword">report</span>'</span><br><span class="line">    /usr/<span class="keyword">local</span>/Library/Homebrew/cmd/<span class="keyword">update</span>.rb:159:<span class="keyword">in</span> <span class="label">`each_line'</span></span><br><span class="line">    /usr/<span class="keyword">local</span>/Library/Homebrew/cmd/<span class="keyword">update</span>.rb:159:<span class="keyword">in</span> <span class="label">`report'</span></span><br><span class="line">    /usr/<span class="keyword">local</span>/Library/Homebrew/cmd/<span class="keyword">update</span>.rb:24:<span class="keyword">in</span> <span class="label">`update'</span></span><br><span class="line">    /usr/<span class="keyword">local</span>/Library/brew.rb:140:<span class="keyword">in</span> `&lt;main&gt;'</span><br></pre></td></tr></table></figure>
<p>のようなエラーが出てしまった。</p>
<p>結論から言えば、もう一度<code>brew update</code>すると無事処理が完了した。</p>
<p>cf. <a href="https://github.com/Homebrew/homebrew/issues/42553" target="_blank" rel="external">Error: uninitialized constant Formulary::HOMEBREW_CORE_FORMULA_REGEX · Issue #42553 · Homebrew/homebrew · GitHub</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>久々に<code>brew update</code>を実行した際に</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br>]]>
    </summary>
    
      <category term="homebrew" scheme="http://3100.github.io/log/tags/homebrew/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[require_relativeの是非]]></title>
    <link href="http://3100.github.io/log/2015/08/18/require-relative/"/>
    <id>http://3100.github.io/log/2015/08/18/require-relative/</id>
    <published>2015-08-18T07:39:25.000Z</published>
    <updated>2015-12-29T06:21:43.636Z</updated>
    <content type="html"><![CDATA[<p>『パーフェクトRuby』(<a href="http://www.amazon.co.jp/dp/4774158798" target="_blank" rel="external">Amazon</a>)によると</p>
<blockquote>
<p>Kernel.#require_relativeは、実行中のファイルから見た相対パスでrequireを行います。requireとは異なり、$LOAD_PATHは探索されません。相対パスの基準となるのはRubyが実行されているディレクトリではなく、require_relativeを呼び出したファイルのディレクトリです。</p>
</blockquote>
<p>とのことで、ライブラリを実装する場合などにお世話になるような機能を提供している。</p>
<h2 id="u4F7F_u308F_u308C_u3066_u3044_u306A_u3044_uFF1F"><a href="#u4F7F_u308F_u308C_u3066_u3044_u306A_u3044_uFF1F" class="headerlink" title="使われていない？"></a>使われていない？</h2><p>が、実際のところは<br><a href="http://qiita.com/nekogeruge_987/items/2d18f388219597c75e05" target="_blank" rel="external">Ruby1.9.2以降でrequireする際の注意点 - Qiita</a><br>のコメント欄にあるように</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$LOAD_PATH</span> &lt;&lt; <span class="string">'/lib'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'filename'</span></span><br></pre></td></tr></table></figure>
<p>などとやることで、require_relativeを使わないという方法が存在する。<br>Ruby 1.9からは</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$:</span>.unshift(<span class="string">'lib'</span>)</span><br></pre></td></tr></table></figure>
<p>でも良い。</p>
<p><a href="http://www.ownway.info/Ruby/idiom/add_library_path" target="_blank" rel="external">ライブラリ(gem)のパス追加 - 君の瞳はまるでルビー - Ruby 関連まとめサイト</a></p>
<h2 id="Ruby_2-1_u4EE5_u524D"><a href="#Ruby_2-1_u4EE5_u524D" class="headerlink" title="Ruby 2.1以前"></a>Ruby 2.1以前</h2><p>config.ruなどのようにeval内でrequire_relativeが呼ばれているとエラーになる様子。</p>
<p><a href="http://ginzanomama.hatenablog.com/entry/2013/04/01/171119" target="_blank" rel="external">config.ruの中でrequire_relativeするとエラーになる - みんなのちからになりたい</a></p>
<p><a href="http://www.benjaminfleischer.com/2013/07/18/ruby-requires-confusion/" target="_blank" rel="external">Ruby requires confusion – Benjamin Fleischer</a></p>
<h2 id="u4F59_u8AC7"><a href="#u4F59_u8AC7" class="headerlink" title="余談"></a>余談</h2><p><a href="https://www.reddit.com/r/ruby/comments/3341zm/require_best_practices/" target="_blank" rel="external">‘Require’ Best Practices? : ruby</a></p>
<p>では、requireを使うほうが好きな人が多そうだった。<br>一方、</p>
<ul>
<li>require_relativeの方が速いだろう</li>
<li>自分の管理しているものはrequire_relative、それ以外はrequireで使い分ける</li>
</ul>
<p>という声もあった。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>『パーフェクトRuby』(<a href="http://www.amazon.co.jp/dp/4774158798" target="_blank" rel="external">Amazon</a>)によると</p>
<blockquote>
<p>Kernel.#r]]>
    </summary>
    
      <category term="ruby" scheme="http://3100.github.io/log/tags/ruby/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hexoでCannot find moduleエラー]]></title>
    <link href="http://3100.github.io/log/2015/08/10/hexo-cannot-find-module/"/>
    <id>http://3100.github.io/log/2015/08/10/hexo-cannot-find-module/</id>
    <published>2015-08-10T14:45:43.000Z</published>
    <updated>2015-12-29T06:21:43.636Z</updated>
    <content type="html"><![CDATA[<h1 id="hexo_u30B3_u30DE_u30F3_u30C9_u5B9F_u884C_u6642_u306B_u30A8_u30E9_u30FC_u304C_u51FA_u529B_u3055_u308C_u308B"><a href="#hexo_u30B3_u30DE_u30F3_u30C9_u5B9F_u884C_u6642_u306B_u30A8_u30E9_u30FC_u304C_u51FA_u529B_u3055_u308C_u308B" class="headerlink" title="hexoコマンド実行時にエラーが出力される"></a>hexoコマンド実行時にエラーが出力される</h1><p>発生環境は以下の通り。Archでは出ていない。</p>
<ul>
<li>iojs v3.0.0</li>
<li>OSX 10.10.4</li>
</ul>
<p>各コマンド実行時に以下のエラーが出力される。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; [<span class="string">Error:</span> Cannot find module <span class="string">'./build/Release/DTraceProviderBindings'</span>] <span class="string">code:</span> <span class="string">'MODULE_NOT_FOUND'</span> &#125;</span><br><span class="line">&#123; [<span class="string">Error:</span> Cannot find module <span class="string">'./build/default/DTraceProviderBindings'</span>] <span class="string">code:</span> <span class="string">'MODULE_NOT_FOUND'</span> &#125;</span><br><span class="line">&#123; [<span class="string">Error:</span> Cannot find module <span class="string">'./build/Debug/DTraceProviderBindings'</span>] <span class="string">code:</span> <span class="string">'MODULE_NOT_FOUND'</span> &#125;</span><br></pre></td></tr></table></figure>
<p>調べたらissueが上がっていた。</p>
<p>cf. <a href="https://github.com/hexojs/hexo/issues/1055" target="_blank" rel="external">hexo shows error message · Issue #1055 · hexojs/hexo</a></p>
<h1 id="u89E3_u6CD5"><a href="#u89E3_u6CD5" class="headerlink" title="解法"></a>解法</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo --no-optional</span><br></pre></td></tr></table></figure>
<p>すると良いみたい。試したところ確かにエラーが出なくなった。あるいは、最初の<code>npm install</code>時に</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --no-optional</span><br></pre></td></tr></table></figure>
<p>としてもエラーは出なかった。</p>
<h2 id="u2013no-optional"><a href="#u2013no-optional" class="headerlink" title="–no-optional"></a>–no-optional</h2><p><a href="https://docs.npmjs.com/cli/install" target="_blank" rel="external">npmのドキュメント</a>によると</p>
<blockquote>
<p>The –no-optional argument will prevent optional dependencies from being installed.</p>
</blockquote>
<p>とのこと。</p>
<h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><p><code>--no-optional</code>を付けるかどうかでpackage.jsonは変化するだろうか。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo --no-optional --save</span><br></pre></td></tr></table></figure>
<p>結論からいうと、package.jsonは変わらなかった。</p>
<p>別ディレクトリに<code>git clone</code>して<code>npm install</code>するとエラーが発生する。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="hexo_u30B3_u30DE_u30F3_u30C9_u5B9F_u884C_u6642_u306B_u30A8_u30E9_u30FC_u304C_u51FA_u529B_u3055_u308C_u308B"><a href="#hexo_u30B3_u30]]>
    </summary>
    
      <category term="hexo" scheme="http://3100.github.io/log/tags/hexo/"/>
    
      <category term="npm" scheme="http://3100.github.io/log/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[gh-pagesとhexo(サブディレクトリ下での使用)]]></title>
    <link href="http://3100.github.io/log/2015/08/10/hexo-with-subdirectory/"/>
    <id>http://3100.github.io/log/2015/08/10/hexo-with-subdirectory/</id>
    <published>2015-08-10T10:14:30.000Z</published>
    <updated>2015-12-29T06:21:43.636Z</updated>
    <content type="html"><![CDATA[<h1 id="hexo_u3092_u30B5_u30D6_u30C7_u30A3_u30EC_u30AF_u30C8_u30EA_u4E0B_u3067_u4F7F_u7528_u3057_u305F_u3044"><a href="#hexo_u3092_u30B5_u30D6_u30C7_u30A3_u30EC_u30AF_u30C8_u30EA_u4E0B_u3067_u4F7F_u7528_u3057_u305F_u3044" class="headerlink" title="hexoをサブディレクトリ下で使用したい"></a>hexoをサブディレクトリ下で使用したい</h1><p>githubで静的サイトジェネレータを使ったblogもどきを複数運用したい。githubには</p>
<ul>
<li>&lt;ユーザ名&gt;.github.io</li>
<li>&lt;組織名&gt;.github.io</li>
<li>&lt;ユーザ名&gt;.github.io/&lt;プロジェクト名&gt;</li>
</ul>
<p>の3通りの方法で<a href="https://pages.github.com/" target="_blank" rel="external">Webサイトを作れる</a>のだが、今回は3番目の場合について。<br>hexoのgithubを見るとサブディレクトリに関するissueが定期的に上がるが、自分も引っかかった。</p>
<h2 id="TL_3BDR"><a href="#TL_3BDR" class="headerlink" title="TL;DR"></a>TL;DR</h2><p>theme側の_config.ymlに書かれている項目のうち上書きしたいものを、プロジェクトの_config.yml内theme_configに記述していけば良い。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">theme_config:</span></span><br><span class="line"><span class="label">  menu:</span></span><br><span class="line"><span class="label">    Home:</span> <span class="regexp">/&lt;project&gt;/</span></span><br><span class="line"><span class="label">    Archives:</span> <span class="regexp">/&lt;project&gt;/</span>archives</span><br></pre></td></tr></table></figure>
<h2 id="u57FA_u672C_u8A2D_u5B9A"><a href="#u57FA_u672C_u8A2D_u5B9A" class="headerlink" title="基本設定"></a>基本設定</h2><p>hexoでサブディレクトリを扱う場合には_config.ymlに以下のような設定を行えば良い。</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">url</span>: <span class="string">http://&lt;your id&gt;.github.io/&lt;project&gt;</span></span><br><span class="line"><span class="attribute">root</span>: <span class="string">/&lt;project&gt;/</span></span><br><span class="line"></span><br><span class="line"><span class="stylus">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github<span class="class">.com</span>:&lt;your id&gt;/&lt;project&gt;<span class="class">.git</span></span><br><span class="line">  branch: gh-pages</span></span><br></pre></td></tr></table></figure>
<p>また、theme側の設定では以下のような設定になっていることが多い。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">menu</span>:</span><br><span class="line">  <span class="attribute">Home</span>: /</span><br><span class="line">  <span class="attribute">Archives</span>: /archives</span><br></pre></td></tr></table></figure>
<p>この場合、当然Homeは<code>http://&lt;your id&gt;.github.io/</code>を指し示す。<br>theme側の_config.ymlに書かれている通りなので正しい挙動なのだが、これではサブディレクトリに関する設定をtheme側でも行わなくてはいけないことになる。</p>
<ul>
<li>themeをgitのsubmoduleとして管理している場合にはわざわざforkしなくてはいけない。</li>
<li>ルートに関する設定を複数箇所で指定するのは面倒。</li>
</ul>
<p>これを</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">menu</span>:</span><br><span class="line">  <span class="attribute">Home</span>: .</span><br><span class="line">  <span class="attribute">Archives</span>: archives</span><br></pre></td></tr></table></figure>
<p>などとすると一見うまくいくように見えるが、個別の記事を表示するとうまくいかない。<br>例えば<code>/&lt;project&gt;/2015/08/10/sample.html</code>のような記事から<code>Archives</code>をクリックすると<code>/&lt;project&gt;/2015/08/10/archives</code>に飛んでしまう。</p>
<h2 id="u30D7_u30ED_u30B8_u30A7_u30AF_u30C8_u306E_u8A2D_u5B9A_u3068_u30C6_u30FC_u30DE_u306E_u8A2D_u5B9A_u3067_u306F_u5F8C_u8005_u304C_u512A_u5148_u3055_u308C_u308B"><a href="#u30D7_u30ED_u30B8_u30A7_u30AF_u30C8_u306E_u8A2D_u5B9A_u3068_u30C6_u30FC_u30DE_u306E_u8A2D_u5B9A_u3067_u306F_u5F8C_u8005_u304C_u512A_u5148_u3055_u308C_u308B" class="headerlink" title="プロジェクトの設定とテーマの設定では後者が優先される"></a>プロジェクトの設定とテーマの設定では後者が優先される</h2><p>menu項目は大抵の場合theme側の_config.ymlに記述されているが、プロジェクト自体の_config.ymlでmenuを設定しても上書きすることはできない。<br>例えば以下のような設定を行ったとする。</p>
<h3 id="theme_u306E_config-yml"><a href="#theme_u306E_config-yml" class="headerlink" title="themeの_config.yml"></a>themeの_config.yml</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">menu</span>:</span><br><span class="line">  <span class="attribute">Home</span>: /</span><br><span class="line">  <span class="attribute">Archives</span>: /archives</span><br></pre></td></tr></table></figure>
<h3 id="u30D7_u30ED_u30B8_u30A7_u30AF_u30C8_u306E_config-yml"><a href="#u30D7_u30ED_u30B8_u30A7_u30AF_u30C8_u306E_config-yml" class="headerlink" title="プロジェクトの_config.yml"></a>プロジェクトの_config.yml</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">menu</span>:</span><br><span class="line">  <span class="attribute">Home</span>: /subdirectory</span><br><span class="line">  <span class="attribute">Archives</span>: /subdirectory/archives</span><br></pre></td></tr></table></figure>
<p>この時、直感的にはプロジェクト側の設定が優先されそうだが、実際にはtheme側の設定が優先されてしまう。</p>
<h2 id="theme_config_u3068_u3044_u3046_u8A2D_u5B9A_u9805_u76EE_u3092_u5229_u7528_u3059_u308B"><a href="#theme_config_u3068_u3044_u3046_u8A2D_u5B9A_u9805_u76EE_u3092_u5229_u7528_u3059_u308B" class="headerlink" title="theme_configという設定項目を利用する"></a>theme_configという設定項目を利用する</h2><p>hexoのドキュメントを見ても記述されていなかったように思うのだがソースコードを追っていくと、theme_configという項目が最優先されることがわかった。<br>具体的には<code>/lib/hexo/index.js</code>内で</p>
<blockquote>
<p>Locals.prototype.theme = _.extend({}, config, theme.config, config.theme_config);</p>
</blockquote>
<p>とある。<code>_.extend()</code>はlodashの提供するメソッドで、複数の引数をとりそれぞれの連想配列をマージする。その際に重複したキーはどんどん更新される。<br>どういうことかというと、プロジェクト側に以下のように設定することで、themeの設定を上書きすることができる。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">theme_config</span>:</span><br><span class="line">  <span class="attribute">menu</span>:</span><br><span class="line">    <span class="attribute">Home</span>: /subdirectory</span><br><span class="line">    <span class="attribute">Archives</span>: /subdirectory/archives</span><br></pre></td></tr></table></figure>
<p>この設定はtheme側の_config.ymlより優先されるので、theme側の設定をいじらずに済むことがわかった。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="hexo_u3092_u30B5_u30D6_u30C7_u30A3_u30EC_u30AF_u30C8_u30EA_u4E0B_u3067_u4F7F_u7528_u3057_u305F_u3044"><a href="#hexo_u3092_u30B5_u30]]>
    </summary>
    
      <category term="github" scheme="http://3100.github.io/log/tags/github/"/>
    
      <category term="hexo" scheme="http://3100.github.io/log/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ArchでのMackerel設定など]]></title>
    <link href="http://3100.github.io/log/2015/08/10/mackerel-on-arch/"/>
    <id>http://3100.github.io/log/2015/08/10/mackerel-on-arch/</id>
    <published>2015-08-10T04:45:19.000Z</published>
    <updated>2015-12-29T06:21:43.636Z</updated>
    <content type="html"><![CDATA[<p>手元で管理しているLinuxは大抵Archディストリビューションを利用している。<br>Archでも正しく動作するし、取り立てて問題はなさそうだが備忘のためにメモしておく。</p>
<h1 id="u30A4_u30F3_u30B9_u30C8_u30FC_u30EB"><a href="#u30A4_u30F3_u30B9_u30C8_u30FC_u30EB" class="headerlink" title="インストール"></a>インストール</h1><p>公式サイトから実行ファイルをダウンロードしてくる</p>
<p><a href="https://mackerel.io/orgs/your-organization/instruction-agent" target="_blank" rel="external">https://mackerel.io/orgs/your-organization/instruction-agent</a></p>
<p>執筆時点での導入方法は以下のとおり<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -O http://file.mackerel.io/agent/tgz/mackerel-agent-latest.tar.gz</span><br><span class="line">tar xvzf mackerel-agent-latest.tar.gz</span><br></pre></td></tr></table></figure></p>
<p>設定ファイル(mackerel-agent.conf)が同梱されているが、記法の参考程度にとどめておけば良さそう。<br>実際の設定ファイルは上記mackerelサイトに記載されている以下のようなコマンド</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo sh &lt;&lt; SCRIPT</span><br><span class="line">cat &gt;&gt;/etc/mackerel-agent/mackerel-agent.conf &lt;&lt;<span class="string">'EOF'</span>;</span><br><span class="line">apikey = <span class="string">"&lt;your api key&gt;"</span></span><br><span class="line">EOF</span><br><span class="line">SCRIPT</span><br></pre></td></tr></table></figure>
<p>を実行する。</p>
<h1 id="systemd_u306E_u30B5_u30FC_u30D3_u30B9_u3068_u3057_u3066_u767B_u9332_u3059_u308B"><a href="#systemd_u306E_u30B5_u30FC_u30D3_u30B9_u3068_u3057_u3066_u767B_u9332_u3059_u308B" class="headerlink" title="systemdのサービスとして登録する"></a>systemdのサービスとして登録する</h1><p><code>mackerel-agent/mackerel-agent</code>が実行ファイルだが、これをサービスとして利用可能にする。</p>
<p><code>/usr/lib/systemd/system/mackerel.service</code>のようなファイルを作成し、以下のように編集する。</p>
<script src="//gist.github.com/e028b64124c4d57b8f1b.js"></script>
<ul>
<li>とりあえず動いているレベルの理解なので、おかしいところがあるかもしれない。</li>
<li><code>$MAINPID</code>は特殊変数らしい。詳しくは以下の記事などを参照。<br><a href="http://enakai00.hatenablog.com/entry/20130917/1379374797" target="_blank" rel="external">Systemd入門(4) - serviceタイプUnitの設定ファイル - めもめも</a></li>
</ul>
<p>この設定を行っておくと、mackerel-agentファイルを直接実行する代わりに</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">sudo</span> <span class="tag">systemctl</span> <span class="tag">enable</span> <span class="tag">mackerel</span><span class="class">.serivce</span></span><br><span class="line"><span class="tag">sudo</span> <span class="tag">systemctl</span> <span class="tag">start</span> <span class="tag">mackerel</span><span class="class">.service</span></span><br></pre></td></tr></table></figure>
<p>などで管理できるようになる。</p>
<h1 id="u516C_u5F0F_u30D7_u30E9_u30B0_u30A4_u30F3_u3092_u4F7F_u3063_u3066_u307F_u308B"><a href="#u516C_u5F0F_u30D7_u30E9_u30B0_u30A4_u30F3_u3092_u4F7F_u3063_u3066_u307F_u308B" class="headerlink" title="公式プラグインを使ってみる"></a>公式プラグインを使ってみる</h1><p>折角なので公式プラグインも使用してみる。<br>CentOSやDebianには公式パッケージが用意されているが、Archにはないのでビルドする。</p>
<p><a href="https://github.com/mackerelio/mackerel-agent-plugins" target="_blank" rel="external">mackerelio/mackerel-agent-plugins</a></p>
<h2 id="Go_u306E_u5C0E_u5165"><a href="#Go_u306E_u5C0E_u5165" class="headerlink" title="Goの導入"></a>Goの導入</h2><p>Goが導入されていない場合はpacman経由で入れる。(gvm, goenvといったenv系を使っても良いかもしれない)</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -Sy <span class="keyword">go</span></span><br></pre></td></tr></table></figure>
<p>導入後、環境変数<code>GOPATH</code>を設定する。これは<code>go get</code>などでライブラリの置き場に使ったりするのだがどこでも良い。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GOPATH=<span class="string">"<span class="variable">$HOME</span>/.go"</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$GOPATH</span>/bin:<span class="variable">$PATH</span>"</span></span><br></pre></td></tr></table></figure>
<p>を<code>$HOME/.zshrc</code>などに追加しておく。</p>
<h2 id="u30D3_u30EB_u30C9_u3059_u308B"><a href="#u30D3_u30EB_u30C9_u3059_u308B" class="headerlink" title="ビルドする"></a>ビルドする</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/mackerelci/mackerel-agent-plugins</span><br><span class="line"><span class="built_in">cd</span> mackerel-agent-plugins</span><br><span class="line">make build</span><br></pre></td></tr></table></figure>
<ul>
<li>もし仮にgoxが無いと言われたら<code>make gox</code>する。</li>
<li>buildフォルダが作られ、その中に各プラグインの実行形式ファイルが生成される。</li>
</ul>
<h2 id="mackerel-agent-conf_u3067_u4F7F_u7528_u3059_u308B_u30D7_u30E9_u30B0_u30A4_u30F3_u3092_u6307_u5B9A_u3059_u308B"><a href="#mackerel-agent-conf_u3067_u4F7F_u7528_u3059_u308B_u30D7_u30E9_u30B0_u30A4_u30F3_u3092_u6307_u5B9A_u3059_u308B" class="headerlink" title="mackerel-agent.confで使用するプラグインを指定する"></a>mackerel-agent.confで使用するプラグインを指定する</h2><p>今回はnginxのプラグイン(<a href="https://github.com/mackerelio/mackerel-agent-plugins/tree/master/mackerel-plugin-nginx" target="_blank" rel="external">mackerel-plugin-nginx</a>)を使ってみる。<br>対応するnginx側モジュールは<a href="http://nginx.org/en/docs/http/ngx_http_stub_status_module.html" target="_blank" rel="external">ngx_http_stub_status_module</a>。<br>pacmanで入るnginxでは有効になっている様子。</p>
<p>nginx.confにて、情報を出力するルートを設定する。例えば以下の通り。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /basic_status &#123;</span><br><span class="line">    stub_status;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>nginxを再起動後、正しく情報が取れるかどうかを確認しておく。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./mackerel-plugin-nginx --host=<span class="string">"&lt;your domain/ip&gt;"</span> --port=<span class="number">80</span> --path=<span class="string">"/basic_status"</span></span><br></pre></td></tr></table></figure>
<p>TSV形式で情報が出力されていればOK。<br>続いて<code>/etc/mackerel-agent/mackerel-agent.conf</code>を編集する。</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">[plugin.metrics.nginx]</span></span><br><span class="line"><span class="setting">command = <span class="value"><span class="string">"/opt/mackerel-agent-plugins/build/mackerel-plugin-nginx --host='&lt;your domain/ip' --port=80 --path='/basic_status'"</span></span></span></span><br></pre></td></tr></table></figure>
<p>mackerel.serviceを再起動し、mackerelのWebページを確認する。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>手元で管理しているLinuxは大抵Archディストリビューションを利用している。<br>Archでも正しく動作するし、取り立てて問題はなさそうだが備忘のためにメモしておく。</p>
<h1 id="u30A4_u30F3_u30B9_u30C8_u30FC_u30EB"><]]>
    </summary>
    
      <category term="arch" scheme="http://3100.github.io/log/tags/arch/"/>
    
      <category term="mackerel" scheme="http://3100.github.io/log/tags/mackerel/"/>
    
  </entry>
  
</feed>
